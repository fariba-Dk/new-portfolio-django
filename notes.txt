pip3 install virtualenv

virtualenv myvenv   *** name of venv file


3.  source myvenv/bin/activate

4.Install Django with name of project:

	django-admin startproject portfolio .

4. Install pip: pip install django

5. Create .gignore

6. Add job blog and job app:

python3 manage.py startapp blog

python3 manage.py runserver

$ pip3 install django psycopg2-binary

createdb faribaportfolio  \

python manage.py runserver

pip install pillow

python manage.py makemigrations


python manage.py migrate


ADMIN


python manage.py createsuperuser

username: faribadadko
Username (leave blank to use 'faribadadko'):
Email address: faribacodes@gmail.com
password: 1234

adding static files together
 python manage.py collectstatic

bootstrap:

https://getbootstrap.com/docs/5.0/examples/album

Adding user to database ->
At the Enter name of role to add: prompt, type the user's name.
At the Enter password for new role: prompt, type a password for the user.
At the Enter it again: prompt, retype the password.
At the Shall the new role be a superuser? prompt, type y if you want to grant superuser access. Otherwise, type n.
At the Shall the new role be allowed to create databases? prompt, type y if you want to allow the user to create new databases. Otherwise, type n.
At the Shall the new role be allowed to create more new roles? prompt, type y if you want to allow the user to create new users. Otherwise, type n.
PostgreSQL creates the user with the settings you specified.


python manage.py migrate --fake sessions zero
# then your sessions migrate will be
python manage.py showmigrations sessions
 [ ] 0001_initial
# then migrate with --fake-initial again
python manage.py migrate --fake-initial


python manage.py migrate --fake sessions zero
# then your sessions migrate will be
python manage.py showmigrations
sessions
 [ ] 0001_initial
# then migrate with --fake-initial again
python manage.py migrate --fake-initial


Set up Heroku
Sign up for Heroku

Install the heroku toolbelt

Open terminal in your project and login to your account.

$ heroku login
Enter your Heroku credentials.
Email: {your heroku email}
Password (typing will be hidden):
Authentication successful.
Preparing The Application
When your project is ready for deployment here are the key steps you have to take.

Add a Procfile
Update requirements.txt
Install Gunicorn and Heroku DJango
Add a runtime.txt to specify the correct Python version in project root
Configure whitenoise to serve static files
The Procfile
Create a file named Procfile in the root of your project directory with the following info..

web: gunicorn {name of your project folder}.wsgi
The Runtime.txt
In terminal run..

python3 -V
this will give you your python version you are using for your project.

Create a runtime.txt in the root project directory with the following info about your python project.

python-{your version number}

Supported Python Runtimes

Install Gunicorn and Django-On-Heroku
In your project folder, with the environment activated, run the following..

$ pip3 install django-on-heroku

This will install the helper addons for heroku. Now we must add it into our project. Add to your settings.py

# after "from pathlib import Path"
import django_on_heroku

# at the bottom of the file
django_on_heroku.settings(locals())
Now to install Gunicorn and Whitenoise!

$ pip3 install gunicorn

Install Whitenoise

$ pip3 install whitenoise
Update requirements.txt
Update your existing Pipfile, or create a new Pipfile with the following command...

pip3 freeze > requirements.txt

Git Add & Commit Changes
Add all Heroku config changes

git add -A

Commit changes

git commit -m "Adds heroku deployment config"

Time to Deploy!
Inside your project folder run..

heroku create faribadk-portfolio --buildpack heroku/python

This will take some time as heroku sets up your heroku remote git.

Once that is complete its time to add a Database to our heroku application.

heroku addons:create heroku-postgresql:hobby-dev
Now you can git add and git commit.

Once that is complete you can now push to Heroku!

$	 git push heroku master

Once that is completed we need to migrate our database just as we would on our own devices.

OPEN THE HEROKU CONSOLE

$	 heroku run bash

INSIDE THE HEROKU CONSOLE RUN

$ 	python3 manage.py makemigrations

$ 	python3 manage.py migrate

EXIT THE HEROKU CONSOLE

$ exit

And viola! Your Django application is officially online! You can run the following command to view it.

$ heroku open
Once you have tested your application and everything is lookging great it's time to turn off debug mode!

in settings.py

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False # change this line to false
now just add, commit and push up to heroku.

Happy Coding!


Amanda Lowry (she/her) - Bakersfield  11:19 AM
try this:
Login to your Heroku dashboard and open your projects.
Go to Settings.
Delete heroku/python from the list of buildpacks
Then click Add buildpack → Choose "Python" → Save Changes.
Activate your environment in your code.
Run heroku ps:scale web=1.
~~~~~~~~~~~~~~~~~

Configure your application
Set the ERROR_PAGE_URL and MAINTENANCE_PAGE_URL config vars to the publicly accessible URLs of your custom pages:

heroku config:set \
  ERROR_PAGE_URL=//s3.amazonaws.com/<your_bucket>/your_error_page.html \
  MAINTENANCE_PAGE_URL=//s3.amazonaws.com/<your_bucket>/your_maintenance_page.html
Testing
To test your maintenance page, type:

heroku maintenance:on
heroku open
The custom page will be served and your application logs will show an H80 code for that web hit indicating that a maintenance page was served to the user.

heroku logs -p router -n 1
2010-10-08T17:44:18-07:00 heroku[router]: at=info code=H80 desc="Maintenance mode" method=GET path=/ host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=
To test your error page, you can push a bad deploy such as putting a syntax error into a key configuration file, or by creating a path on your app that sleeps for 35 seconds (thereby triggering the error H12 Request Timeout. Visit an app or path with such an error, while watching the logs:

heroku logs --tail
2010-10-08T18:04:40-07:00 app[web.1]: Sleeping 35 seconds before I serve this page
2010-10-08T18:05:10-07:00 heroku[router]: at=error code=H12 desc="Request timeout" method=GET path=/ host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=6ms service=30001ms status=503 bytes=0
2010-10-08T18:05:15-07:00 app[web.1]: Done sleeping
The custom error page will be displayed in your browser.

~~~~~~~
git remote add origin https://github.com/fariba-Dk/my-portfolio.github.io.git
git branch -M main
git push -u origin main
